#+TITLE: 学习笔记
#+OPTIONS: toc:2
#+OPTIONS: toc:t
#+STARTUP: overview
#+COLUMNS: %25ITEM %TAGS %TODO %3PRIORITYd
#+OPTIONS: ^:nil
#+OPTIONS: email:t
#+HTML_MATHJAX: align: left indent: 5em tagside: left font: Neo-Euler

* 本周作业

 #+begin_src
Week02 作业题目（周四）：

1.使用 GCLogAnalysis.java 自己演练一遍串行 / 并行 /CMS/G1 的案例。

2.使用压测工具（wrk 或 sb），演练 gateway-server-0.0.1-SNAPSHOT.jar 示例。

3.（选做） 如果自己本地有可以运行的项目，可以按照 2 的方式进行演练。
4.（必做） 根据上述自己对于 1 和 2 的演示，写一段对于不同 GC 的总结，提交到 Github。

Week02 作业题目（周六）：

1.（选做）运行课上的例子，以及 Netty 的例子，分析相关现象。
2.（必做）写一段代码，使用 HttpClient 或 OkHttp 访问 http://localhost:8801 ，代码提交到 Github。

以上作业，要求 2 道必做题目提交到 Github 上面，Week02 作业提交地址：
https://github.com/JAVA-000/JAVA-000/issues/113

请务必按照示例格式进行提交，不要复制其他同学的格式，以免格式错误无法抓取作业。
作业提交截止时间 10 月 28 日（下周三）23:59 前。

Github 使用教程： https://u.geekbang.org/lesson/51?article=294701
学号查询方式：PC 端登录 time.geekbang.org, 点击右上角头像进入我的教室，左侧头像下方 G 开头的为学号
 #+end_src

***  利用gcviewer对各个gc log分析如下
 - UseSerialGC
   最基础最早的收集器，单线程工作的收集器。 在进行垃圾回收的时候，必须暂停其他所有工作线程. (Stop The World)
   目前在服务端几乎没有什么用户之地，但它依然是HotSpot虚拟机运行在客户端模式下的默认新生 代收集器，有着优于其他收集器的地方.
   ParNew收集器实质上是Serial收集器的多线程并行版本,ParNew收集器除了支持多线程并行收集之外，
   其他与Serial收集器相比并没有太多创新之处，但它却是不少运行在服务端模式下的HotSpot虚拟机，
   尤其是JDK 7之前的遗留系统中首选的新生代收集器，
   其中有一个与功能、性能无关但其实很重要的原因是:除了Serial收集器外，目前只有它能与CM S 收集器配合工作。
   

  Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用标记-整理算法。这个收
  集器的主要意义也是供客户端模式下的HotSpot虚拟机使用。如果在服务端模式下，它也可能有两种用
  途:一种是在JDK 5以及之前的版本中与Parallel Scavenge收集器搭配使用，
  另外一种就是作为CMS收集器发生失败时的后备预案，在并发收集发生Concurrent Mode Failure时使用
 [[file:png/serialgc-analysic-1.png]]

 - UseParallelGC
   Parallel Scavenge收集器也是一款新生代收集器，它同样是基于标记-复制算法实现的收集器，也是 能够并行收集的多线程收集器
   Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，
   CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，
   而Parallel Scavenge收集器的目标则是达到一个可控制的吞吐量(Throughput)
   
  Parallel Old是Parallel Scavenge收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现。
  这个收集器是直到JDK 6时才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于相当尴尬的状态，
  原因是如果新生代选择了Parallel Scavenge收集器，老年代除了Serial Old(PS MarkSweep)收集器以外别无选择，
  其他表现良好的老年代收集器，如CMS无法与它配合工作。由于老年代Serial Old收集器在服务端应用性能上的“拖累”，
  使用Parallel Scavenge收集器也未必能在整体上获得吞吐量最大化的效果。
  同样，由于单线程的老年代收集中无法充分利用服务器多处理器的并行处理能力，
  在老年代内存空间很大而且硬件规格比较高级的运行环境中，这种组合的总吞吐量甚至不一定比ParNew加CMS的组合来得优秀。
  直到Parallel Old收集器出现后，“吞吐量优先”收集器终于有了比较名副其实的搭配组合，在注重吞吐量或者处理器资源较为稀缺的场合，
  都可以优先考虑Parallel Scavenge加Parallel Old收集器这个组合

 [[file:png/parallelgc-analysic.png]]

 - UseConcMarkSweepGC
   CMS(Concurrent Mark Sweep)收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网网站或者基于浏览器的B/S系统的服务端上，
   这类应用通常都会较为 关注服务的响应速度，希望系统停顿时间尽可能短，以给用户带来良好的交互体验

 [[file:png/cms-gc.png]]

 - UseG1GC
   Garbage First(简称G1)收集器是垃圾收集器技术发展历史上的里程碑式的成果，它开创了收集器面向局部收集的设计思路和基于Region的内存布局形式
   G1是一款主要面向服务端应用的垃圾收集器,JDK 9发布之日，G1宣告取代Parallel Scavenge加Parallel Old组合，成为服务端模式下的默认垃圾收集器，而CMS则
   沦落至被声明为不推荐使用(Deprecate)的收集器
 [[file:png/gc-first.png]]

 - 其余两款GC目前业务中几乎用不到，只是粗略了解
   - [[https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html][ZGC]] 
   - [[https://segmentfault.com/a/1190000021786789][Shenandoah]]
 - *gc 日志分析的工具用的gcViewer，相关资料参考的 《深入理解java虚拟机》*


* gc 分析工具
  - [[https://gceasy.io/][GCEasy]]
  - [[https://github.com/jewes/gchisto][GCHisto]]
  - [[https://github.com/chewiebug/GCViewer][GCViewer]]
  - [[https://code.google.com/archive/p/gclogviewer/][gclogviewer]]  * just supported jdk 1.6*
  - [[https://juejin.im/post/6844903791909666823][gc log 说明]]
  - [[https://www.bookstack.cn/read/gc-handbook/spilt.5.06_GC_Tuning_Tooling_CN.md][gcviewer 使用说明]]
  - [[https://arthas.aliyun.com/doc/][Arthas]]
  - jdk 1.7 1.8 的jvm内存模型是不一样的，在1.8 下的各个版本的gc，按照1.8的内存模型来处理Metaspace 区
