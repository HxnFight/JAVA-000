#+TITLE: 学习笔记
#+OPTIONS: toc:2
#+OPTIONS: toc:t
#+STARTUP: overview
#+COLUMNS: %25ITEM %TAGS %TODO %3PRIORITYd
#+OPTIONS: ^:nil
#+OPTIONS: email:t
#+HTML_MATHJAX: align: left indent: 5em tagside: left font: Neo-Euler
#+setupfile: http://css.valjean.cn/css/org-theme/setup/nginx/readtheorg-ng.setup

* 作业题目

 #+begin_src
1.（选做）分析前面作业设计的表，是否可以做垂直拆分。
2.（必做）设计对前面的订单表数据进行水平分库分表，拆分 2 个库，每个库 16 张表。并在新结构在演示常见的增删改查操作。代码、sql 和配置文件，上传到 Github。
3.（选做）模拟 1000 万的订单单表数据，迁移到上面作业 2 的分库分表中。
4.（选做）重新搭建一套 4 个库各 64 个表的分库分表，将作业 2 中的数据迁移到新分库。

Week08 作业题目（周六）：
1.（选做）列举常见的分布式事务，简单分析其使用场景和优缺点。
2.（必做）基于 hmily TCC 或 ShardingSphere 的 Atomikos XA 实现一个简单的分布式事务应用 demo（二选一），提交到 Github。
3.（选做）基于 ShardingSphere narayana XA 实现一个简单的分布式事务 demo。
4.（选做）基于 seata 框架实现 TCC 或 AT 模式的分布式事务 demo。
5.（选做☆）设计实现一个简单的 XA 分布式事务框架 demo，只需要能管理和调用 2 个 MySQL 的本地事务即可，不需要考虑全局事务的持久化和恢复、高可用等。
6.（选做☆）设计实现一个 TCC 分布式事务框架的简单 Demo，需要实现事务管理器，不需要实现全局事务的持久化和恢复、高可用等。
7.（选做☆）设计实现一个 AT 分布式事务框架的简单 Demo，仅需要支持根据主键 id 进行的单个删改操作的 SQL 或插入操作的事务。

https://github.com/JAVA-000/JAVA-000/issues/141
 #+end_src

* 学习记录
** 遇到的问题
    - ss 5.x . spring boot 2.xx 启动报空指针。
    需要配置common相关配置
    https://github.com/apache/shardingsphere/issues/8306
    - ss 源码编译命令
    #+begin_src  shell
    mvn clean package install -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Drat.skip=true -Dcheckstyle.skip=true
    #+end_src

* 作业实现
** 必做题目
*** 设计对前面的订单表数据进行水平分库分表，拆分 2 个库，每个库 16 张表。并在新结构在演示常见的增删改查操作。代码、sql 和配置文件，上传到 Github。

    使用 shardingsphere-jdbc 对库、表按trans_id实现， 因我自己业务中的订单号，非纯数字
    采用哈希取模策略实现, 关键配置如下:
#+begin_src
spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds0.t_order_$->{0..16}
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=trans_id
# hash_mod 分片策略  注意actual-data-nodes 的配置 会对 availableTargetNames  这个变量产生影响，多配不会出错。但是会影响效率. 少配肯定出错
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=t-order-hash-mod
spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-hash-mod.type=HASH_MOD
spring.shardingsphere.rules.sharding.sharding-algorithms.t-order-hash-mod.props.sharding-count=8
#+end_src

    *完整配置*: [[file:./code/src/main/resources/config/application-step-two.properties][properties文件]]
    *测试用例*: [[file:./code/src/test/java/cn/valjean/week08/Week08ApplicationTests.java][测试用例]]


**** 基于 hmily TCC 或 ShardingSphere 的 Atomikos XA 实现一个简单的分布式事务应用 demo（二选一），提交到 Github。
